package ethermint

import (
	"context"
	"testing"

	"github.com/gogo/protobuf/proto"

	"github.com/ethereum/go-ethereum/common"

	sdk "github.com/irisnet/core-sdk-go"
	"github.com/irisnet/core-sdk-go/common/crypto"
	evmtypes "github.com/irisnet/core-sdk-go/ethermint/x/evm/types"
	"github.com/irisnet/core-sdk-go/types"
	sdktypes "github.com/irisnet/core-sdk-go/types"
	"github.com/irisnet/core-sdk-go/types/store"
)

func TestError(t *testing.T) {
	hex
	bytesData := common.Hex2Bytes(hex)
	resp := &evmtypes.MsgEthereumTxResponse{}
	err := proto.Unmarshal(bytesData, resp)
	if err != nil {
		t.Fatal(err)
	}
	//revertErr := evmtypes.NewExecErrorWithReason(resp.Ret)
	//t.Log(revertErr)
}

func TestClient(t *testing.T) {

	//nodeURI := "tcp://localhost:26657"
	//grpcAddr := "localhost:9090"
	//chainID := "wenchangchain"
	nodeURI := "tcp://192.168.0.160:26657"
	grpcAddr := "192.168.0.160:9090"
	chainID := "wenchangchain-qa"

	bech32AddressPrefix := sdktypes.AddrPrefixCfg{
		AccountAddr:   "iaa",
		ValidatorAddr: "iva",
		ConsensusAddr: "ica",
		AccountPub:    "iap",
		ValidatorPub:  "ivp",
		ConsensusPub:  "icp",
	}
	options := []sdktypes.Option{
		sdktypes.KeyDAOOption(store.NewMemory(nil)),
		sdktypes.TimeoutOption(10),
		sdktypes.KeyManagerOption(crypto.NewKeyManager()),
		sdktypes.Bech32AddressPrefixOption(&bech32AddressPrefix),
		sdktypes.BIP44PathOption(""),
	}
	cfg, err := types.NewClientConfig(nodeURI, grpcAddr, chainID, options...)
	if err != nil {
		panic(err)
	}

	sdkClient := sdk.NewClient(cfg)

	cli := NewClient(sdkClient.BaseClient, sdkClient.EncodingConfig().TxConfig)
	cli.RegisterInterfaceTypes(sdkClient.EncodingConfig().InterfaceRegistry)

	resp1, err := sdkClient.QueryTx("CCF73180DFF268DE3E451B5A59CDE9FA8E4D2BEF925158FD73A86A4E64400077")
	if err != nil {
		panic(err)
	}
	txResponse, err := evmtypes.DecodeTxResponse(resp1.Result.Data)
	if err != nil {
		return
	}

	if txResponse.Ret == nil {
		return
	}

	revetErr := evmtypes.NewExecErrorWithReason(txResponse.Ret)
	if err != nil {
		return
	}
	t.Log(revetErr)

	return

	txData := "0xf901470801831e8480941a6640c32b7e6413e839e9dfdb53970ee809b7fb80b8e4990711900000000000000000000000005892e7eeaea5ba624f5ba2900dbab8d2ea36d62b000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001a687474703a2f2f6578616d706c652e636f6d2f746f6b656e2f35000000000000000000000000000000000000000000000000000000000000000000000000000974657374686173683600000000000000000000000000000000000000000000008209b2a050e1d159818efbae1c536b2c866920ac3c8c3720b9194b02c5ecea7717f85d2da05eabeb96aad81f432e1d7d3f84e6d38ce939e7a2d1f0bee3af2f20f507c91b96"
	feePayer := "0x4579DB44FD3A6F645194058914E0A8D5E8F20DB8"
	evmDenom := "ugas"
	rawTx, err := cli.BuildEvmTx(txData, feePayer, evmDenom)
	if err != nil {
		t.Log(err)
		return
	}
	priv := "-----BEGIN TENDERMINT PRIVATE KEY-----\nkdf: bcrypt\nsalt: 7FDD1E16A62E8B6AF914ECADCFF815FD\ntype: eth_secp256k1\n\nDHoFvjH6+FNcAj8be7oGXnpfQWlSnPG9o/yLezuDmnQWtkPcTqaAfizPG18PU3hq\nYWWxhh1a+/MNxF9u85h3Tv3vq/a7EebOsBf3AXI=\n=PI4S\n-----END TENDERMINT PRIVATE KEY-----"
	sdkClient.Key.Import("test01", "12345678", priv)
	resp, err := cli.BroadcastTxSync(context.Background(), rawTx)
	if err != nil {
		t.Log(err)
		return
	}
	t.Log(resp)
}
