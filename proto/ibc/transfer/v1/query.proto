syntax = "proto3";
package ibc.applications.transfer.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";

option go_package = "github.com/irisnet/core-sdk-go/ibc/transfer";

// Query provides defines the gRPC querier service.
service Query {
  // DenomTrace queries a denomination trace information.
  rpc DenomTrace(QueryDenomTraceRequest) returns (QueryDenomTraceResponse) {
    option (google.api.http).get = "/ibc/transfer/v1beta1/denom_traces/{hash}";
  }

  // DenomTraces queries all denomination traces.
  rpc DenomTraces(QueryDenomTracesRequest) returns (QueryDenomTracesResponse) {
    option (google.api.http).get = "/ibc/transfer/v1beta1/denom_traces";
  }
}

// QueryDenomTraceRequest is the request type for the Query/DenomTrace RPC
// method
message QueryDenomTraceRequest {
  // hash (in hex format) of the denomination trace information.
  string hash = 1;
}

// QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
// method.
message QueryDenomTraceResponse {
  // denom_trace returns the requested denomination trace information.
  DenomTrace denom_trace = 1;
}

// QueryConnectionsRequest is the request type for the Query/DenomTraces RPC
// method
message QueryDenomTracesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
// method.
message QueryDenomTracesResponse {
  // denom_traces returns all denominations trace information.
  repeated DenomTrace denom_traces = 1 [(gogoproto.castrepeated) = "Traces", (gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1;
}

// DenomTrace contains the base denomination for ICS20 fungible tokens and the
// source tracing information path.
message DenomTrace {
  // path defines the chain of port/channel identifiers used for tracing the
  // source of the fungible token.
  string path = 1;
  // base denomination of the relayed fungible token.
  string base_denom = 2;
}

// Params defines the set of IBC transfer parameters.
// NOTE: To prevent a single token from being transferred, set the
// TransfersEnabled parameter to true and then set the bank module's SendEnabled
// parameter for the denomination to false.
message Params {
  // send_enabled enables or disables all cross-chain token transfers from this
  // chain.
  bool send_enabled = 1 [(gogoproto.moretags) = "yaml:\"send_enabled\""];
  // receive_enabled enables or disables all cross-chain token transfers to this
  // chain.
  bool receive_enabled = 2 [(gogoproto.moretags) = "yaml:\"receive_enabled\""];
}



